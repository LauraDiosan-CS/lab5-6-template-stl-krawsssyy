#include "tests.h"
#include <assert.h>

void testBooks() {
	char* author1 = new char[20];
	char* author2 = new char[20];
	char* author3 = new char[20];
	char* title1 = new char[30];
	char* title2 = new char[30];
	char* title3 = new char[30];
	strcpy_s(author1, sizeof("Andrei"), "Andrei");
	strcpy_s(author2, sizeof("Alex"), "Alex");
	strcpy_s(author3, sizeof("Gabriel"), "Gabriel");
	strcpy_s(title1, sizeof("Masina timpului"), "Masina timpului");
	strcpy_s(title1, sizeof("Vrajitorul din Oz"), "Vrajitorul din Oz");
	strcpy_s(title1, sizeof("Luceafarul"), "Luceafarul");
	Book b1(1, author1, title1, 1992);
	Book b2(2, author2, title2, 2001);
	Book b3(3, author3, title3, 2012);
	assert(b1.getID() == 1);
	assert(!strcmp(b1.getAuthor(), author1));
	assert(!strcmp(b1.getTitle(), title1));
	assert(b1.getYear() == 1992);
	assert(b2.getID() == 2);
	assert(!strcmp(b2.getAuthor(), author2));
	assert(!strcmp(b2.getTitle(), title2));
	assert(b2.getYear() == 2001);
	assert(b3.getID() == 3);
	assert(!strcmp(b3.getAuthor(), author3));
	assert(!strcmp(b3.getTitle(), title3));
	assert(b3.getYear() == 2012);
	b1.setYear(2002);
	char* newAuthor = new char[20];
	strcpy_s(newAuthor, sizeof("Marcu"), "Marcu");
	b2.setAuthor(newAuthor);
	char* newTitle = new char[30];
	strcpy_s(newTitle, sizeof("Baieti de oras"), "Baieti de oras");
	b3.setTitle(newTitle);
	assert(b1.getYear() == 2002);
	assert(!strcmp(b2.getAuthor(), newAuthor));
	assert(!strcmp(b3.getTitle(), newTitle));
	delete[] newTitle;
	newTitle = nullptr;
	delete[] newAuthor;
	newAuthor = nullptr;
	delete[] title3;
	title3 = nullptr;
	delete[] title2;
	title2 = nullptr;
	delete[] title1;
	title1 = nullptr;
	delete[] author3;
	author3 = nullptr;
	delete[] author2;
	author2 = nullptr;
	delete[] author1;
	author1 = nullptr;
}


void testClients() {
	char* name1 = new char[20];
	char* name2 = new char[20];
	char* name3 = new char[20];
	strcpy_s(name1, sizeof("Andrei"), "Andrei");
	strcpy_s(name2, sizeof("Alex"), "Alex");
	strcpy_s(name3, sizeof("Gabriel"), "Gabriel");
	Client c1(1, name1);
	vector<int> v1;
	v1.emplace_back(1); v1.emplace_back(2);
	Client c2(2, name2, true, v1);
	vector<int> v2;
	v2.emplace_back(3);
	Client c3(3, name3, true, v2);
	assert(c1.getID() == 1);
	assert(!strcmp(c1.getClientName(), name1));
	assert(!c1.getClientBorrowState());
	assert(c2.getID() == 2);
	assert(!strcmp(c2.getClientName(), name2));
	assert(c2.getClientBorrowState());
	assert(c2.getClientBorrowedIDs().size() == 2);
	assert(c2.getClientBorrowedIDs()[0] == v1[0]);
	assert(c2.getClientBorrowedIDs()[1] == v1[1]);
	assert(c3.getID() == 3);
	assert(!strcmp(c3.getClientName(), name3));
	assert(c3.getClientBorrowState());
	assert(c3.getClientBorrowedIDs().size() == 1);
	assert(c3.getClientBorrowedIDs()[0] == v2[0]);
	c1.setName(name2);
	assert(!strcmp(c1.getClientName(), name2));
	c3.setVector(v1);
	assert(c3.getClientBorrowedIDs()[0] == v1[0]);
	assert(c3.getClientBorrowedIDs()[1] == v1[1]);
	c2.changeBorrow();
	assert(!c2.getClientBorrowState());
	delete[] name3;
	name3 = nullptr;
	delete[] name2;
	name2 = nullptr;
	delete[] name1;
	name1 = nullptr;
}

void testRepo() {
	char* author1 = new char[20];
	char* author2 = new char[20];
	char* author3 = new char[20];
	char* title1 = new char[30];
	char* title2 = new char[30];
	char* title3 = new char[30];
	strcpy_s(author1, sizeof("Andrei"), "Andrei");
	strcpy_s(author2, sizeof("Alex"), "Alex");
	strcpy_s(author3, sizeof("Gabriel"), "Gabriel");
	strcpy_s(title1, sizeof("Masina timpului"), "Masina timpului");
	strcpy_s(title1, sizeof("Vrajitorul din Oz"), "Vrajitorul din Oz");
	strcpy_s(title1, sizeof("Luceafarul"), "Luceafarul");
	Book b1(1, author1, title1, 1992);
	Book b2(2, author2, title2, 2001);
	Book b3(3, author3, title3, 2012);
	Repo<Book> repo;
	repo.addElement(b1);
	assert(repo.getSize() == 1);
	repo.addElement(b2);
	assert(repo.getSize() == 2);
	repo.addElement(b3);
	assert(repo.getSize() == 3);
	assert(*repo.readEntity(3) == b3);
	assert(*repo.readEntity(2) == b2);
	assert(*repo.readEntity(1) == b1);
	assert(repo.readEntity(4) == nullptr);
	priority_queue<Book> result;
	result = repo.getAll();
	assert(result.top() == b3);
	result.pop();
	assert(result.top() == b2);
	result.pop();
	assert(result.top() == b1);
	result.pop();
	assert(result.empty());
	repo.deleteEntity(2);
	assert(repo.getSize() == 2);
	repo.deleteEntity(4);
	assert(repo.getSize() == 2);
	Book b4(4, author1, title2, 2014);
	repo.updateEntity(1, b4);
	result = repo.getAll();
	assert(result.top() == b4);
	delete[] title3;
	title3 = nullptr;
	delete[] title2;
	title2 = nullptr;
	delete[] title1;
	title1 = nullptr;
	delete[] author3;
	author3 = nullptr;
	delete[] author2;
	author2 = nullptr;
	delete[] author1;
	author1 = nullptr;

}


void testService() {
	char* author1 = new char[20];
	char* author2 = new char[20];
	char* author3 = new char[20];
	char* title1 = new char[30];
	char* title2 = new char[30];
	char* title3 = new char[30];
	strcpy_s(author1, sizeof("Andrei"), "Andrei");
	strcpy_s(author2, sizeof("Alex"), "Alex");
	strcpy_s(author3, sizeof("Gabriel"), "Gabriel");
	strcpy_s(title1, sizeof("Masina timpului"), "Masina timpului");
	strcpy_s(title1, sizeof("Vrajitorul din Oz"), "Vrajitorul din Oz");
	strcpy_s(title1, sizeof("Luceafarul"), "Luceafarul");
	Book b1(1, author1, title1, 1992);
	Book b2(2, author2, title2, 2001);
	Book b3(3, author3, title3, 2012);
	repoFile<Book> repoBook("");
	repoFile<Client> repoClient("");
	Service s(repoBook, repoClient);
	s.addBook(1, author1, title1, 1992);
	assert(s.getSize() == 1);
	s.addBook(2, author2, title2, 2001);
	assert(repoBook.getSize() == 2);
	s.addBook(3, author3, title3, 2012);
	assert(s.getSize() == 3);
	assert(*s.readBook(3) == b3);
	assert(*s.readBook(2) == b2);
	assert(*s.readBook(1) == b1);
	assert(s.readBook(4) == nullptr);
	priority_queue<Book> result;
	result = s.getAll();
	assert(result.top() == b3);
	result.pop();
	assert(result.top() == b2);
	result.pop();
	assert(result.top() == b1);
	result.pop();
	assert(result.empty());
	s.deleteBook(2);
	assert(s.getSize() == 2);
	s.deleteBook(4);
	assert(s.getSize() == 2);
	Book b4(4, author1, title2, 2014);
	s.updateBook(1, 4, author1, title2, 2014, false);
	result = s.getAll();
	assert(result.top() == b4);
	delete[] title3;
	title3 = nullptr;
	delete[] title2;
	title2 = nullptr;
	delete[] title1;
	title1 = nullptr;
	delete[] author3;
	author3 = nullptr;
	delete[] author2;
	author2 = nullptr;
	delete[] author1;
	author1 = nullptr;
	char* name1 = new char[20];
	char* name2 = new char[20];
	char* name3 = new char[20];
	strcpy_s(name1, sizeof("Andrei"), "Andrei");
	strcpy_s(name2, sizeof("Alex"), "Alex");
	strcpy_s(name3, sizeof("Gabriel"), "Gabriel");
	Client c1(1, name1);
	vector<int> v1;
	v1.emplace_back(1); v1.emplace_back(2);
	Client c2(2, name2, true, v1);
	vector<int> v2;
	v2.emplace_back(3);
	Client c3(3, name3, true, v2);
	s.addClient(1, name1);
	assert(s.getClientsSize() == 1);
	s.addClient(2, name2);
	assert(repoClient.getSize() == 2);
	s.addClient(3, name3);
	assert(s.getClientsSize() == 3);
	s.borrowBook(3, 4);
	assert(s.readBook(4)->getBorrowState());
	s.borrowBook(3, 3);
	assert(s.readBook(3)->getBorrowState());
	priority_queue<Client> clients = s.getClients();
	Client c4 = clients.top();
	assert(c4.getClientBorrowedIDs()[0] == 4);
	assert(c4.getClientBorrowedIDs()[1] == 3);
	s.returnBook(3, 3);
	clients = s.getClients();
	c4 = clients.top();
	assert(c4.getClientBorrowedIDs()[0] == 4);
	s.deleteClient(3);
	assert(s.getClientsSize() == 2);
	s.updateClient(2, 3, name3, true, v2);
	assert(s.getClients().top() == c3);
	delete[] name3;
	name3 = nullptr;
	delete[] name2;
	name2 = nullptr;
	delete[] name1;
	name1 = nullptr;

}

void testRepoFile() {
	priority_queue<Client> clients;
	char* name1 = new char[20];
	char* name2 = new char[20];
	char* name3 = new char[20];
	strcpy_s(name1, sizeof("Andrei"), "Andrei");
	strcpy_s(name2, sizeof("Alex"), "Alex");
	strcpy_s(name3, sizeof("Gabriel"), "Gabriel");
	Client c1(1, name1);
	vector<int> v1;
	v1.emplace_back(1); v1.emplace_back(2);
	Client c2(2, name2, true, v1);
	vector<int> v2;
	v2.emplace_back(3);
	Client c3(3, name3, true, v2);
	clients.push(c1);
	clients.push(c2);
	clients.push(c3);
	repoFile<Client> repo("RepoTest.txt");
	repo.addElement(c1);
	repo.addElement(c2);
	repo.addElement(c3);
	priority_queue<Client> result = repo.getAll();
	while (!result.empty() && !clients.empty()) {
		assert(result.top() == clients.top());
		result.pop();
		clients.pop();
	}
	Client c4(4, name2);
	repo.addElement(c4);
	repo.saveToFile();
	repo.loadFromFile();
	result = repo.getAll();
	assert(result.top() == c4);
	delete[] name3;
	name3 = nullptr;
	delete[] name2;
	name2 = nullptr;
	delete[] name1;
	name1 = nullptr;
	std::ofstream ofs;
	ofs.open("RepoTest.txt", ios::out | ios::trunc);
	ofs.close();
}